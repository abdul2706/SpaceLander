/*
MISSION: Land on flat surface on mountain
WIN CASE: Land with required velocity on flat surface
LOSE CASE: Hit with mountain by any means or loss of control or ship out of screen
*/

/*
gravity on moon -> 1.568 m/s^-2
gravity on mars -> 3.711 m/s^-2
mass of typical spaceship -> 1000kg
*/

struct VECTOR2D {
	float X, Y;
	float norm, angle;

	void initByCoords(float x, float y) {
		X = x, Y = y;
		norm = sqrt(X*X + Y*Y);
		angle = atan(Y / X);
	}

	void initByNormAngle(float length, float alpha) {
		norm = length;
		angle = alpha;
		X = norm * cos(alpha * PI / 180);
		Y = norm * sin(alpha * PI / 180);
	}

	void normalize() {
		X = X / norm;
		Y = Y / norm;
	}

	void scale(float scale) {
		X *= scale;
		Y *= scale;
	}

	void translate(float dx, float dy) {
		X += dx;
		Y += dy;
		initByCoords(X, Y);
	}

	void rotate(float alpha){
		angle = alpha;
		X = norm * cos(alpha * PI / 180);
		Y = norm * sin(alpha * PI / 180);
	}

	void draw(int x, int y, int c) {
		setcolor(c);
		line(x, y, x + X, y + Y);
	}

	void show() {
		printf("-------------------------------------------------\n");
		printf("x -> %f\t", X);
		printf("y -> %f", Y);
		printf("\n-------------------------------------------------\n");
	}
};

float dt = 0.1, t = dt, mass = 1000, gravity = 1.568;
//forces
VECTOR2D Weight = { 0, gravity*mass, 0, 90 }, ThrustVert = { 0, MIN_THRUST, 0, -90 }, ThrustHori = { MIN_THRUST, 0, 0, 0 }, Force = { 1000, 0, 0, 0 };
//acceleration
VECTOR2D Acc = { 0, 0, 0, 0 };
//velocity
VECTOR2D Vel = { 5, 0, 0, 0 };
//position
VECTOR2D Pos = { 0.5*WIDTH, 0 * HEIGHT, 0, 0 }, Display = { 0, 0, 0, 0 };

const int noOfMountains = 8;
const int mountSize = noOfMountains * 180;
float mountain[mountSize] = {0};
char text[100];

int MountainPhysics();
void HUD();
int checkMountainCollision();
int isSpecial(int x, int y);
int lineCollision();
void showPoints();

int MountainPhysics() {
	int response = -1;
	swapbuffers();
	cleardevice();
	MountainCollision();

	char ch = ' ';
	int count;
	bool collide = false;

	IMAGE &currPlayer = player3;
	IMAGE &currThrust = thrust3;
	initObject(&player, 0, 0, playerW, playerH, 0, 3, MAX_FUEL);

	while (1) {
		while (!kbhit()) {
			swapbuffers();
			cleardevice();

			HUD();
			drawpoly(totalVerts / 2, Mountain);
			showPoints();

			Acc.initByCoords(Force.X / mass, Force.Y / mass);
			Vel.initByCoords(Vel.X + Acc.X*dt, Vel.Y + Acc.Y*dt);
			Pos.initByCoords(Pos.X + Vel.X*dt + 0.5*Acc.X*dt*dt, Pos.Y + Vel.Y*dt + 0.5*Acc.Y*dt*dt);
			player.x = Pos.X, player.y = Pos.Y;

			setcolor(WHITE);
			drawObject(&player, currPlayer.imgPtr, player.life, player.fuel);
			if (player.fuel > 0) { player.fuel--; }

			if (Pos.X < 0)Pos.X = WIDTH;
			if (Pos.X > WIDTH)Pos.X = 0;

			response = checkMountainCollision();
			if (response == 1) {
				responceMountain = 1;
				return 1;
			}
			else if (response == 0) {
				responceMountain = 0;
				return 0;
			}

			Force.initByCoords(Weight.X, Weight.Y);
			t += dt;
			delay(10);
		}

		ch = getch();
		if (ch == 27) { return 0; }
		else if (ch == 'w' && player.fuel > 0) {
			ThrustVert.initByCoords(0, ThrustVert.Y - 100.0);
			Force.initByCoords(0, Weight.Y + ThrustVert.Y + ThrustHori.Y);
			putimage(player.x + 0.6*player.w, player.y + player.h, thrust3.imgPtr, COPY_PUT);
			putimage(player.x + 0.2*player.w, player.y + player.h, thrust3.imgPtr, COPY_PUT);
			delay(10);
		}
		else if (ch == 'a' && player.fuel > 0) {
			ThrustHori.initByCoords(ThrustHori.X + 100.0, 0);
			Force.initByCoords(Weight.X + ThrustVert.X + ThrustHori.X, 0);
			putimage(player.x - 0.7*blastW, player.y + 0.7*player.h, thrust1.imgPtr, COPY_PUT);
			delay(10);
		}
		else if (ch == 'd' && player.fuel > 0) {
			ThrustHori.initByCoords(ThrustHori.X - 100.0, 0);
			Force.initByCoords(Weight.X + ThrustVert.X + ThrustHori.X, 0);
			putimage(player.x + player.w, player.y + 0.7*player.h, thrust2.imgPtr, COPY_PUT);
			delay(10);
		}

		if (ThrustHori.X <= -MAX_THRUST)ThrustHori.X = -MAX_THRUST;
		else if (ThrustHori.X >= MAX_THRUST)ThrustHori.X = MAX_THRUST;
		if (ThrustVert.Y >= 0)ThrustVert.Y = 0;
		else if (ThrustVert.Y <= -MAX_THRUST)ThrustVert.Y = -MAX_THRUST;
//		Force.initByCoords(Weight.X + ThrustVert.X + ThrustHori.X, Weight.Y + ThrustVert.Y + ThrustHori.Y);
	}
	return 0;
}

void HUD() {
	char str[50];
	//	RED -> Force; GREEN -> Acc; BLUE -> Vel; WHITE -> Pos
	setcolor(WHITE);
	settextstyle(1, 0, 25);
	sprintf(str, "Score: %d", score);
	outtextxy(0.5*WIDTH, 0, str);
	setcolor(RED);			settextstyle(8, 0, 2);			sprintf(str, "Fx -> %0.4f,\tFy -> %0.4f", Force.X, Force.Y);					outtextxy(0, 0, str);
	setcolor(GREEN);		settextstyle(8, 0, 2);			sprintf(str, "Ax -> %0.4f,\tAy -> %0.4f", Acc.X, Acc.Y);					outtextxy(0, 0.03*HEIGHT, str);
	setcolor(BLUE);			settextstyle(8, 0, 2);			sprintf(str, "Vx -> %0.4f,\tVy -> %0.4f", Vel.X, Vel.Y);					outtextxy(0, 0.06*HEIGHT, str);
	setcolor(WHITE);		settextstyle(8, 0, 2);			sprintf(str, "Px -> %0.4f,\tPy -> %0.4f", Pos.X, Pos.Y);				outtextxy(0, 0.09*HEIGHT, str);
	Display.initByCoords(Force.X, Force.Y);			Display.normalize();			Display.scale(50);			Display.draw(0.9*WIDTH, 0.1*HEIGHT, RED);			//printf("FORCE\n");Display.show();
	Display.initByCoords(Acc.X, Acc.Y);				Display.normalize();			Display.scale(50);			Display.draw(0.9*WIDTH, 0.1*HEIGHT, GREEN);			//printf("ACC\n");Display.show();
	Display.initByCoords(Vel.X, Vel.Y);				Display.normalize();			Display.scale(50);			Display.draw(0.9*WIDTH, 0.1*HEIGHT, BLUE);			//printf("VEL\n");Display.show();
	Display.initByCoords(Pos.X, Pos.Y);				Display.normalize();			Display.scale(50);			Display.draw(0.9*WIDTH, 0.1*HEIGHT, WHITE);			//printf("POS\n");Display.show();
}

void showPoints() {
	int avgX;
	for (int i = 0; i < 9; i++) {
		avgX = (lines[i].x1 + lines[i].x2) / 2;
		sprintf(text, "%d", Points[i]);
		outtextxy(avgX-(textwidth("500")/2), lines[i].y1 + 10, text);
	}
}

int checkMountainCollision() {
	int responce = -1;

	responce = lineCollision();
	if (responce == 1 && Vel.Y <= 25) {
//		sprintf(text, "Perfect Landing");
//		outtextxy(0, 200, text);
//		swapbuffers();cleardevice();
//		delay(1000);
		return 1;
	}
	else if(responce == 1){
//		sprintf(text, "Imperpect Landing");
//		outtextxy(0, 200, text);
		putimage(player.x, player.y, blast1.imgPtr, COPY_PUT);
		swapbuffers();cleardevice();
		delay(1000);
		return 0;
	}
	else {
//		sprintf(text, "In Air");
//		outtextxy(0, 200, text);
	}

	for (int i = 0; i < totalVerts; i+=2) {
		if (player.y <= Mountain[i + 1] && (player.y + player.h) >= Mountain[i + 1]) {
			if (player.x <= Mountain[i] && (player.x + player.w) >= Mountain[i]) {
//				sprintf(text, "Mountain Collision");
//				outtextxy(0, 200, text);
				putimage(player.x, player.y, blast1.imgPtr, COPY_PUT);
				swapbuffers();
				cleardevice();
				delay(1000);
				return 0;
			}
		}
	}
	return -1;
}

int isSpecial(int x, int y) {
	for (int i = 0; i < 36; i+=2) {
		if (x == hillSpecialCords[i] && y == hillSpecialCords[i+1]) {
			return 1;
		}
	}
	return 0;
}

int lineCollision() {
	for (int i = 0; i < 9; i++) {
		if ((player.y + player.h) >= lines[i].y1 && player.x >= lines[i].x1 && (player.x + player.w) <= lines[i].x2) {
			score = Points[i];
			return 1;
		}
	}
	return -1;
}





/*
void translate(float *arr, int size, float dx, float dy) {
	for (int i = 0; i < size; i += 2) {
		arr[i] += dx;
		arr[i + 1] += dy;
	}
}

void scale(int *arr, int size, float scaleX, float scaleY) {
	for (int i = 0; i < size; i += 2) {
		arr[i] *= scaleX;
		arr[i + 1] *= scaleY;
	}
}

void shiftRight(float *arr, int size) {
//	printVerts(arr, size);
	int last = arr[size - 3];
	for (int i = size - 5; i >= 3; i -= 2) {
		arr[i + 2] = arr[i];
	}
	arr[3] = last;
//	printf("\n-----------------------------------------------------------------------------\n");
//	printVerts(arr, size);
}

void shiftLeft(float *arr, int size) {
//	printVerts(arr, size);
	int first = arr[3];
	for (int i = 3; i < size - 3; i += 2) {
		arr[i] = arr[i + 2];
	}
	arr[size - 3] = first;
//	printf("\n-----------------------------------------------------------------------------\n");
//	printVerts(arr, size);
}
*/